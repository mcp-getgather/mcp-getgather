name: Deploy to Dokku

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy (${{ matrix.server }})
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    strategy:
      matrix:
        include:
          - server: production
            git_remote_url_secret: DOKKU_GIT_REMOTE_URL_PRODUCTION
            ssh_host_key_secret: DOKKU_SSH_HOST_KEY_PRODUCTION
            ssh_private_key_secret: DOKKU_SSH_PRIVATE_KEY_PRODUCTION
            tailscale_app_url_secret: TAILSCALE_APP_URL_PRODUCTION
          - server: all
            git_remote_url_secret: DOKKU_GIT_REMOTE_URL_ALL
            ssh_host_key_secret: DOKKU_SSH_HOST_KEY_ALL
            ssh_private_key_secret: DOKKU_SSH_PRIVATE_KEY_ALL
            tailscale_app_url_secret: TAILSCALE_APP_URL_ALL

    steps:
      - name: Check out source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show 5 most recent commits
        run: git log --oneline -n 5

      - name: Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
          use-cache: true

      - name: Show Tailnet IP address
        run: tailscale ip

      - name: Check the reachability of the app server
        env:
          APP_URL: ${{ secrets[matrix.tailscale_app_url_secret] }}
        run: |
          echo "Target: ${{ matrix.server }}"
          curl -s "${APP_URL}/health"
        continue-on-error: true

      - name: Deploy to GCE via dokku
        uses: dokku/github-action@master
        with:
          trace: 1
          branch: main
          git_push_flags: --force
          git_remote_url: ${{ secrets[matrix.git_remote_url_secret] }}
          ssh_host_key: ${{ secrets[matrix.ssh_host_key_secret] }}
          ssh_private_key: ${{ secrets[matrix.ssh_private_key_secret] }}

      - name: Verify deployment via health endpoint
        env:
          APP_URL: ${{ secrets[matrix.tailscale_app_url_secret] }}

        run: |-
          LOCAL_COMMIT=$(git rev-parse HEAD)
          echo "Target: ${{ matrix.server }}"
          echo "Local commit: $LOCAL_COMMIT"
          echo "App URL: $APP_URL"

          # Check health endpoint and extract git revision
          HEALTH_RESPONSE=$(curl -s "${APP_URL}/health" || echo "FAILED")
          echo "Health response: $HEALTH_RESPONSE"

          if [[ "$HEALTH_RESPONSE" == "FAILED" ]]; then
            echo "Error: Health endpoint is not accessible"
            exit 1
          fi

          # Extract git revision from health response (format: "OK <timestamp> GIT_REV: <commit>")
          REMOTE_COMMIT=$(echo "$HEALTH_RESPONSE" | grep -o "GIT_REV: [a-f0-9]*" | cut -d' ' -f2)
          echo "Remote commit: $REMOTE_COMMIT"

          if [ "$LOCAL_COMMIT" != "$REMOTE_COMMIT" ]; then
            echo "Error: Local and remote commits do not match"
            exit 1
          fi

          echo "âœ… Deployment and health endpoint verified successfully"

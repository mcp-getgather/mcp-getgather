/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/activities/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Activities
         * @description Get all activities ordered by start_time descending.
         */
        get: operations["activities-get_activities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activities/{activity_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Activity
         * @description Get a specific activity by ID.
         */
        get: operations["activities-get_activity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/activities/{activity_id}/recordings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Recording
         * @description Get rrweb events for a specific activity.
         */
        get: operations["activities-get_recording"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brands": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Brands
         * @description Get a list of all brands and their details.
         */
        get: operations["brands-get_brands"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brands/{brand_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Brand
         * @description Get a specific brand by ID.
         */
        get: operations["brands-get_brand"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/{brand_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Auth Flow Redirect
         * @description Redirect old auth flow endpoint to versioned endpoint.
         */
        post: operations["auth-auth_flow_redirect"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/v1/{brand_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Auth
         * @description Start or continue an authentication flow for a connector.
         */
        post: operations["auth-auth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/link/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Hosted Link */
        post: operations["link-create_hosted_link"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/link/status/{link_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Hosted Link */
        get: operations["link-get_hosted_link"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Hosted Link */
        patch: operations["link-update_hosted_link"];
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health */
        get: operations["no-tag-health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/docs-mcp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Mcp Docs */
        get: operations["no-tag-mcp_docs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** APIBrandSpec */
        APIBrandSpec: {
            /** Id */
            id: string;
            /** Name */
            name: string;
        };
        /**
         * Activity
         * @description JSON-persisted activity record.
         */
        Activity: {
            /** Id */
            id: string;
            /** Brand Id */
            brand_id: string;
            /** Name */
            name: string;
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /** End Time */
            end_time?: string | null;
            /** Execution Time Ms */
            execution_time_ms?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /** Has Recording */
            has_recording?: boolean | null;
        };
        /**
         * AuthFlowRequest
         * @description Request for an auth flow.
         */
        AuthFlowRequest: {
            /**
             * Profile Id
             * @description The browser profile ID used for the extraction.
             */
            profile_id?: string | null;
            /** @description The state of the auth flow. */
            state?: components["schemas"]["FlowState-Input"] | null;
            /**
             * Extract
             * @description Whether to extract the data after the auth flow is complete.
             * @default true
             */
            extract: boolean;
            /** @description The location for the client making the request. */
            location?: components["schemas"]["RequestInfo"] | null;
        };
        /**
         * AuthFlowResponse
         * @description Response from an auth flow step.
         */
        AuthFlowResponse: {
            /**
             * Profile Id
             * @description The browser profile ID used for the extraction.
             */
            profile_id: string;
            status: components["schemas"]["AuthStatus"];
            /** @description The state of the auth flow. */
            state: components["schemas"]["FlowState-Output"];
            /** @description The result of the extract flow, if one occurs. */
            extract_result?: components["schemas"]["ExtractResult"] | null;
        };
        /**
         * AuthStatus
         * @description The status of the auth flow.
         * @enum {string}
         */
        AuthStatus: "INITIALIZING" | "RUNNING" | "PAUSED" | "NEED_INPUT" | "FINISHED" | "ERROR";
        /**
         * BrandIdEnum
         * @enum {string}
         */
        BrandIdEnum: "acme-email-and-password-navigate-action" | "acme-email-and-password-then-mfa" | "acme-email-password" | "acme-email-password-checkbox" | "acme-email-password-iframe" | "acme-email-password-lastname-overlay" | "acme-email-password-overlay" | "acme-email-then-otp" | "acme-email-then-otp-multi-inputs" | "acme-email-then-otp-or-pass" | "acme-email-then-pass-or-otp" | "acme-email-then-password" | "acme-email-then-password-labels" | "acme-email-then-password-long-delay" | "acme-email-then-password-mfa-choice-phone-email" | "acme-email-then-password-then-mfa" | "acme-email-validation-and-password" | "acme-submit-form" | "acme-submit-js-inline" | "acme-submit-js-route" | "adidas" | "agoda" | "aliexpress" | "alltrails" | "amain" | "amazon" | "amazonca" | "americanairlines" | "ashley" | "astro" | "audible" | "bbc" | "bedbathandbeyond" | "booking" | "chewy" | "cnn" | "containerstore" | "costco" | "delta" | "doordash" | "ebay" | "ebird" | "expedia" | "gofood" | "goodreads" | "google" | "hardcover" | "harrys" | "hilton" | "horizonhobby" | "ikea" | "jetblue" | "kindle" | "lenspure" | "linkedin" | "lululemon" | "marriott" | "netflix" | "nike" | "nordstrom" | "officedepot" | "petsmart" | "quince" | "revolve" | "seatgeek" | "sephora" | "shein" | "shopee" | "starbucks" | "thriftbooks" | "tokopedia" | "ubereats" | "universal-error-page" | "wayfair" | "zillow";
        /** Bundle */
        Bundle: {
            /** Name */
            name: string;
            /** Content */
            content: string;
        };
        /**
         * BundleOutput
         * @description A bundle output.
         */
        BundleOutput: {
            /** Name */
            name: string;
            /** Parsed */
            parsed: boolean;
            parse_schema: components["schemas"]["Schema"] | null;
            /** Content */
            content: unknown;
        };
        /** ChoicePrompt */
        ChoicePrompt: {
            /** Name */
            name: string;
            /** Prompt */
            prompt?: string | null;
            /** Groups */
            groups: components["schemas"]["InputPrompt"][];
            /** Message */
            message?: string | null;
        };
        /** Column */
        Column: {
            /** Name */
            name: string;
            /** Selector */
            selector: string;
            /** Attribute */
            attribute?: string | null;
            /** Function */
            function?: string | null;
            /**
             * Multiple
             * @default false
             */
            multiple: boolean;
        };
        /**
         * ExtractResult
         * @description Result of an extract flow.
         */
        ExtractResult: {
            /**
             * Profile Id
             * @description The browser profile ID used for the extraction.
             */
            profile_id: string;
            state: components["schemas"]["ExtractState"];
            /**
             * Bundles
             * @description The file bundles and their contents that were extracted.
             */
            bundles: components["schemas"]["BundleOutput"][];
        };
        /**
         * ExtractState
         * @description The state of the extract flow.
         * @enum {string}
         */
        ExtractState: "INITIALIZING" | "RUNNING" | "PAUSED" | "NEED_AUTH" | "FINISHED" | "ERROR";
        /** FlowState */
        "FlowState-Input": {
            /** Browser Profile Id */
            browser_profile_id?: string | null;
            brand_id?: components["schemas"]["BrandIdEnum"] | null;
            /**
             * Type
             * @default auth
             * @enum {string}
             */
            type: "auth" | "extract";
            /** Paused */
            paused?: string | null;
            /** Bundle Dir */
            bundle_dir?: string | null;
            /**
             * Step Index
             * @default 0
             */
            step_index: number;
            /** Current Page Spec Name */
            current_page_spec_name?: string | null;
            /** Inputs */
            inputs?: {
                [key: string]: string;
            };
            /** Error */
            error?: string | null;
            bundle?: components["schemas"]["Bundle"] | null;
        };
        /** FlowState */
        "FlowState-Output": {
            /**
             * Step Index
             * @default 0
             */
            step_index: number;
            /** Current Page Spec Name */
            current_page_spec_name?: string | null;
            /** Inputs */
            inputs?: {
                [key: string]: string;
            };
            /** Error */
            error?: string | null;
            bundle?: components["schemas"]["Bundle"] | null;
            /** Brand Name */
            readonly brand_name: string;
            readonly prompt: components["schemas"]["StatePrompt"] | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HostedLinkTokenRequest
         * @description Request for creating a hosted link token.
         */
        HostedLinkTokenRequest: {
            /**
             * Brand Id
             * @description Brand identifier for authentication
             */
            brand_id: string;
            /**
             * Redirect Url
             * @description URL to redirect after successful auth
             */
            redirect_url?: string | null;
            /**
             * Webhook
             * @description Webhook URL for notifications
             */
            webhook?: string | null;
            /**
             * Url Lifetime Seconds
             * @description Token lifetime in seconds
             * @default 900
             */
            url_lifetime_seconds: number;
            /**
             * Profile Id
             * @description Existing browser profile ID to reuse
             */
            profile_id?: string | null;
        };
        /**
         * HostedLinkTokenResponse
         * @description Response from creating a hosted link token.
         */
        HostedLinkTokenResponse: {
            /**
             * Link Id
             * @description 6-character link identifier
             */
            link_id: string;
            /**
             * Profile Id
             * @description Browser profile identifier
             */
            profile_id?: string | null;
            /**
             * Hosted Link Url
             * @description Complete hosted link URL
             */
            hosted_link_url: string;
            /**
             * Expiration
             * @description Token expiration timestamp
             */
            expiration: string;
        };
        /** InputPrompt */
        InputPrompt: {
            /** Name */
            name: string;
            /** Prompt */
            prompt?: string | null;
            /** Label */
            label?: string | null;
            /** Type */
            type?: string | null;
            /** Options */
            options?: string[] | null;
        };
        /**
         * LinkDataUpdate
         * @description A subset of LinkData fields that can be updated.
         */
        LinkDataUpdate: {
            /** Status */
            status: string;
            /** Statusmessage */
            statusMessage?: string | null;
            /** Extractresult */
            extractResult?: {
                [key: string]: unknown;
            }[] | null;
            /** Profileid */
            profileId?: string | null;
        };
        /** MCPDoc */
        MCPDoc: {
            /** Name */
            name: string;
            /**
             * Type
             * @enum {string}
             */
            type: "brand" | "category" | "all";
            /** Route */
            route: string;
            /** Tools */
            tools: components["schemas"]["MCPToolDoc"][];
        };
        /** MCPToolDoc */
        MCPToolDoc: {
            /** Name */
            name: string;
            /** Description */
            description: string;
        };
        /**
         * Recording
         * @description Recording response model for API.
         */
        Recording: {
            /** Activity Id */
            activity_id: string;
            /** Events */
            events: {
                [key: string]: unknown;
            }[];
        };
        /**
         * RequestInfo
         * @description Information about the request that initiated the auth flow.
         */
        RequestInfo: {
            /**
             * City
             * @description The city of the client.
             */
            city?: string | null;
            /**
             * State
             * @description The state of the client.
             */
            state?: string | null;
            /**
             * Country
             * @description The country of the client.
             */
            country?: string | null;
            /**
             * Postal Code
             * @description The postal code of the client.
             */
            postal_code?: string | null;
        };
        /** Schema */
        Schema: {
            /** Bundle */
            bundle: string;
            /**
             * Format
             * @constant
             */
            format: "html";
            /** Output */
            output: string;
            /** Row Selector */
            row_selector: string;
            /** Columns */
            columns: components["schemas"]["Column"][];
            /**
             * Extraction Method
             * @default locator
             * @enum {string}
             */
            extraction_method: "locator" | "evaluator" | "python_parser";
        };
        /** StatePrompt */
        StatePrompt: {
            /** Name */
            name: string;
            /** Prompt */
            prompt: string;
            /** Choices */
            choices: components["schemas"]["ChoicePrompt"][];
        };
        /**
         * TokenLookupResponse
         * @description Response from token lookup.
         */
        TokenLookupResponse: {
            /**
             * Link Id
             * @description 6-character link identifier
             */
            link_id: string;
            /**
             * Profile Id
             * @description Browser profile identifier
             */
            profile_id?: string | null;
            /** Brand Id */
            brand_id: string;
            /** Redirect Url */
            redirect_url: string | null;
            /** Webhook */
            webhook: string | null;
            /** Status */
            status: string;
            /** Created At */
            created_at: string;
            /** Expires At */
            expires_at: string;
            /**
             * Extract Result
             * @description Extracted authentication data
             */
            extract_result?: {
                [key: string]: unknown;
            } | null;
            /** Message */
            message: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "activities-get_activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"][];
                };
            };
        };
    };
    "activities-get_activity": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                activity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Activity"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "activities-get_recording": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                activity_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Recording"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "brands-get_brands": {
        parameters: {
            query?: {
                test?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIBrandSpec"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "brands-get_brand": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                brand_id: components["schemas"]["BrandIdEnum"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIBrandSpec"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "auth-auth_flow_redirect": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                brand_id: components["schemas"]["BrandIdEnum"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "auth-auth": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                brand_id: components["schemas"]["BrandIdEnum"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthFlowRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthFlowResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "link-create_hosted_link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HostedLinkTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HostedLinkTokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "link-get_hosted_link": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                link_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenLookupResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "link-update_hosted_link": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                link_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LinkDataUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenLookupResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    "no-tag-health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "no-tag-mcp_docs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MCPDoc"][];
                };
            };
        };
    };
}
